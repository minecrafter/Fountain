--- minecraft/src/net/minecraft/world/World.java
+++ src/main/java/net/minecraft/world/World.java
@@ -19,10 +19,11 @@
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ICrashReportDetail;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLiving;
+import net.minecraft.entity.item.EntityFallingBlock;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Biomes;
 import net.minecraft.init.Blocks;
 import net.minecraft.item.ItemStack;
@@ -68,10 +69,13 @@
 import net.minecraft.world.storage.ISaveHandler;
 import net.minecraft.world.storage.MapStorage;
 import net.minecraft.world.storage.WorldInfo;
 import net.minecraft.world.storage.loot.LootTableManager;
 
+import org.fountainmc.WetServer;
+import org.fountainmc.world.WetWorld;
+
 public abstract class World implements IBlockAccess {
    private int seaLevel = 63;
    protected boolean scheduledUpdatesAreImmediate;
    public final List<Entity> loadedEntityList = Lists.newArrayList();
    protected final List<Entity> unloadedEntityList = Lists.newArrayList();
@@ -109,11 +113,18 @@
    protected boolean spawnHostileMobs;
    protected boolean spawnPeacefulMobs;
    private boolean processingLoadedTiles;
    private final WorldBorder worldBorder;
    int[] lightUpdateBlockList;
+   // Fountain start
+   private final WetWorld fountainWorld = new WetWorld(WetServer.getInstance(), this);
 
+   public WetWorld getFountainWorld() {
+      return fountainWorld;
+   }
+   // Fountain end
+
    protected World(ISaveHandler var1, WorldInfo var2, WorldProvider var3, Profiler var4, boolean var5) {
       this.eventListeners = Lists.newArrayList(new IWorldEventListener[]{this.pathListener});
       this.theCalendar = Calendar.getInstance();
       this.worldScoreboard = new Scoreboard();
       this.spawnHostileMobs = true;
@@ -748,10 +759,18 @@
       this.weatherEffects.add(var1);
       return true;
    }
 
    public boolean spawnEntityInWorld(Entity var1) {
+      // SportBukkit Start
+      if(var1 instanceof EntityFallingBlock && ((EntityFallingBlock) var1).getBlock().getBlock() == this.getBlockState(new BlockPos(var1)).getBlock()) {
+          EntityFallingBlock fallingBlock = (EntityFallingBlock) var1;
+          if(fallingBlock.ticksExisted != 0 && fallingBlock.getBlock().getBlock() == this.getBlockState(new BlockPos(fallingBlock)).getBlock()) {
+              return false;
+          }
+      }
+      // SportBukkit End
       int var2 = MathHelper.floor_double(var1.posX / 16.0D);
       int var3 = MathHelper.floor_double(var1.posZ / 16.0D);
       boolean var4 = var1.forceSpawn;
       if(var1 instanceof EntityPlayer) {
          var4 = true;
@@ -1982,27 +2001,27 @@
 
       return var4;
    }
 
    public <T extends Entity> List<T> getEntities(Class<? extends T> var1, Predicate<? super T> var2) {
-      ArrayList var3 = Lists.newArrayList();
+      ArrayList<T> var3 = Lists.newArrayList();
 
       for(Entity var5 : this.loadedEntityList) {
-         if(var1.isAssignableFrom(var5.getClass()) && var2.apply(var5)) {
-            var3.add(var5);
+         if(var1.isAssignableFrom(var5.getClass()) && var2.apply((T) var5)) {
+            var3.add((T) var5);
          }
       }
 
       return var3;
    }
 
    public <T extends Entity> List<T> getPlayers(Class<? extends T> var1, Predicate<? super T> var2) {
-      ArrayList var3 = Lists.newArrayList();
+      ArrayList<T> var3 = Lists.newArrayList();
 
       for(Entity var5 : this.playerEntities) {
-         if(var1.isAssignableFrom(var5.getClass()) && var2.apply(var5)) {
-            var3.add(var5);
+         if(var1.isAssignableFrom(var5.getClass()) && var2.apply((T) var5)) {
+            var3.add((T) var5);
          }
       }
 
       return var3;
    }
